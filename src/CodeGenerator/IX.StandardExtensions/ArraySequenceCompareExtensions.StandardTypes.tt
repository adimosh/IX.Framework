<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="..\StandardTypes.tt" #><#@ include file="..\Fixture.tt" #>
<#@ output extension=".cs" #>
// <copyright file="ArraySequenceCompareExtensions.StandardTypes.cs" company="Adrian Mos">
// Copyright (c) Adrian Mos with all rights reserved. Part of the IX Framework.
// </copyright>

using System;

namespace IX.StandardExtensions
{
    /// <summary>
    /// Extensions for array types.
    /// </summary>
    public static partial class ArraySequenceCompareExtensions
    {<#
List<string> code = new List<string>();

foreach (var typ in types.Where(p => p != typeof(byte[])))
{
    string fullTypeName = GetTypeUsableName(typ);
#>

        /// <summary>
        ///     Compares two arrays to one another sequentially.
        /// </summary>
        /// <param name="left">The left operand array.</param>
        /// <param name="right">The right operand array.</param>
        /// <returns>The result of the comparison.</returns>
        public static int SequenceCompare(this <#= fullTypeName #>[] left, <#= fullTypeName #>[] right)
        {
            if (left == null)
            {
                // Left is null, we return based on whether or not right is null as well
                return right == null ? 0 : int.MinValue;
            }

            if (right == null)
            {
                // Right is null, but not left
                return int.MaxValue;
            }

            var i = 0;
            while (true)
            {
                var b1 = i < left.Length;
                var b2 = i < right.Length;

                if (!b1 && !b2)
                {
                    return 0;
                }

                var c1 = b1 ? left[i] : default;
                var c2 = b2 ? right[i] : default;

                var cr = c1.CompareTo(c2);
                if (cr != 0)
                {
                    return cr;
                }

                i++;
            }
        }
<#
}
#>
    }
}