<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <copyright file="LinqExtensions.ActionsAndFuncs.cs" company="Adrian Mos">
// Copyright (c) Adrian Mos with all rights reserved. Part of the IX Framework.
// </copyright>

using System;
using System.Collections.Generic;
using IX.StandardExtensions.Contracts;

namespace IX.StandardExtensions
{
    /// <summary>
    /// Extension methods for LINQ.
    /// </summary>
    public static partial class LinqExtensions
    {
#pragma warning disable HAA0401 // Possible allocation of reference type enumerator - This is acceptable, as these are IEnumerable extensions<#
for (int i = 1; i <= 8; i++)
{
    string[] types = new string[i];
    string[] names = new string[i];
    string[] nameTypes = new string[i];

    for (int j = 1; j <= i; j++)
    {
        int idx = j - 1;
        types[idx] = $"TParam{j}";
        names[idx] = $"param{j}";
        nameTypes[idx] = $"TParam{j} param{j}";
    }

    string paramTypes = string.Join(", ", types);
    string paramNames = string.Join(", ", names);
    string paramNameTypes = string.Join(", ", nameTypes);
#>

        /// <summary>
        /// Determines whether a sequence contains any elements that match a specific predicate.
        /// </summary>
        /// <typeparam name="TItem">The enumerable item type.</typeparam>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <typeparam name="TParam<#= j #>">The type of parameter to be passed to the invoked predicate at index <#= j - 1 #>.</typeparam>
<#
    }
#>
        /// <param name="source">The <see cref="System.Collections.Generic.IEnumerable{T}" /> to check for emptiness.</param>
        /// <param name="action">The predicate to check items with.</param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="param<#= j #>">A parameter of type <typeparamref name="TParam<#= j #>" /> to pass to the invoked predicate at index <#= j - 1 #>.</param>
<#
    }
#>
        /// <returns><see langword="true"/> if the source sequence contains any elements; otherwise, <see langword="false"/>.</returns>
        /// <exception cref="ArgumentNullException">Thrown when <paramref name="source" /> or <paramref name="action" /> are <see langword="null"/> (<see langword="Nothing"/> in Visual Basic).</exception>
        [Obsolete(
            "This method is obsolete and will be removed. Please use the same method in the IX.StandardExtensions.Extensions namespace.")]
        public static bool Any<TItem, <#= paramTypes #>>(this IEnumerable<TItem> source, Func<TItem, <#= paramTypes #>, bool> action, <#= paramNameTypes #>)
            => Extensions.LinqExtensions.Any(source, action, <#= paramNames #>);

        /// <summary>
        /// Filters a sequence of values based on a predicate.
        /// </summary>
        /// <typeparam name="TItem">The enumerable item type.</typeparam>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <typeparam name="TParam<#= j #>">The type of parameter to be passed to the invoked predicate at index <#= j - 1 #>.</typeparam>
<#
    }
#>
        /// <param name="source">The <see cref="System.Collections.Generic.IEnumerable{T}" /> to filter.</param>
        /// <param name="action">The predicate to check items with.</param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="param<#= j #>">A parameter of type <typeparamref name="TParam<#= j #>" /> to pass to the invoked predicate at index <#= j - 1 #>.</param>
<#
    }
#>
        /// <returns>The filtered enumerable.</returns>
        /// <exception cref="ArgumentNullException">Thrown when <paramref name="source" /> or <paramref name="action" /> are <see langword="null"/> (<see langword="Nothing"/> in Visual Basic).</exception>
        [Obsolete(
            "This method is obsolete and will be removed. Please use the same method in the IX.StandardExtensions.Extensions namespace.")]
        public static IEnumerable<TItem> Where<TItem, <#= paramTypes #>>(this IEnumerable<TItem> source, Func<TItem, <#= paramTypes #>, bool> action, <#= paramNameTypes #>)
            => Extensions.LinqExtensions.Where(source, action, <#= paramNames #>);

        /// <summary>
        /// Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.
        /// </summary>
        /// <typeparam name="TItem">The enumerable item type.</typeparam>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <typeparam name="TParam<#= j #>">The type of parameter to be passed to the invoked predicate at index <#= j - 1 #>.</typeparam>
<#
    }
#>
        /// <param name="source">The <see cref="System.Collections.Generic.IEnumerable{T}" /> to check.</param>
        /// <param name="action">The predicate to check items with.</param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="param<#= j #>">A parameter of type <typeparamref name="TParam<#= j #>" /> to pass to the invoked predicate at index <#= j - 1 #>.</param>
<#
    }
#>
        /// <returns>The first filtered item, or a default value.</returns>
        /// <exception cref="ArgumentNullException">Thrown when <paramref name="source" /> or <paramref name="action" /> are <see langword="null"/> (<see langword="Nothing"/> in Visual Basic).</exception>
        [Obsolete(
            "This method is obsolete and will be removed. Please use the same method in the IX.StandardExtensions.Extensions namespace.")]
        public static TItem FirstOrDefault<TItem, <#= paramTypes #>>(this IEnumerable<TItem> source, Func<TItem, <#= paramTypes #>, bool> action, <#= paramNameTypes #>)
            => Extensions.LinqExtensions.FirstOrDefault(source, action, <#= paramNames #>);
<#
}
#>
#pragma warning restore HAA0401 // Possible allocation of reference type enumerator
    }
}