<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <copyright file="ImmutableValueTuple.cs" company="Adrian Mos">
// Copyright (c) Adrian Mos with all rights reserved. Part of the IX Framework.
// </copyright>

using JetBrains.Annotations;

namespace IX.StandardExtensions.Efficiency
{
#pragma warning disable SA1402 // File may only contain a single type<#
for (int i = 1; i <= 8; i++)
{
    string[] types = new string[i];
    string[] names = new string[i];
    string[] nameTypes = new string[i];
    string[] parameters = new string[i];

    for (int j = 1; j <= i; j++)
    {
        int idx = j - 1;
        types[idx] = $"TItem{j}";
        names[idx] = $"item{j}";
        nameTypes[idx] = $"TItem{j} item{j}";
        parameters[idx] = $"this.Item{j} = item{j}";
    }

    string paramTypes = string.Join(", ", types);
    string paramNames = string.Join(", ", names);
    string paramNameTypes = string.Join(", ", nameTypes);
    string paramParameters = string.Join(", ", parameters);
#>

    /// <summary>
    /// An immutable value tuple.
    /// </summary>
<#
    for (int j = 1; j <= i; j++)
    {
#>
    /// <typeparam name="TItem<#= j #>">The type of the item at index <#= j #>.</typeparam>
<#
    }
#>
    [PublicAPI]
    public readonly struct ImmutableValueTuple<<#= paramTypes #>>
    {
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <summary>
        /// The item at index <#= j #>.
        /// </summary>
        public readonly <#= types[j-1] #> Item<#= j #>;

<#
    }
#>
        /// <summary>
        /// Initializes a new instance of the <see cref="ImmutableValueTuple{<#= paramTypes #>}"/> struct.
        /// </summary>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="item<#= j #>">The value of the item at index <#= j #>.</param>
<#
    }
#>
        public ImmutableValueTuple(<#= paramNameTypes #>)
        {
<#
    for (int j = 1; j <= i; j++)
    {
#>
            this.Item<#= j #> = item<#= j #>;
<#
    }
#>
        }
    }
<#
}
#>
#pragma warning restore SA1402 // File may only contain a single type
}