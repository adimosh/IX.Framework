<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <copyright file="RefIteratorDelegates.WithParameters.cs" company="Adrian Mos">
// Copyright (c) Adrian Mos with all rights reserved. Part of the IX Framework.
// </copyright>

namespace IX.StandardExtensions.Efficiency
{<#
for (int i = 1; i <= 8; i++)
{
    string[] types = new string[i];
    string[] names = new string[i];
    string[] nameTypes = new string[i];

    for (int j = 1; j <= i; j++)
    {
        int idx = j - 1;
        types[idx] = $"TParam{j}";
        names[idx] = $"param{j}";
        nameTypes[idx] = $"ref TParam{j} param{j}";
    }

    string paramTypes = string.Join(", ", types);
    string paramNames = string.Join(", ", names);
    string paramNameTypes = string.Join(", ", nameTypes);
#>

    /// <summary>
    /// A generic delegate for a method whose parameters are all marked as &quot;ref&quot;, with a return type, usable with an iterator variable.
    /// </summary>
    /// <typeparam name="TIteratorItem">The type of the iterator variable.</typeparam>
<#
    for (int j = 1; j <= i; j++)
    {
#>
    /// <typeparam name="TParam<#= j #>">The type of the parameter at index <#= j - 1 #>.</typeparam>
<#
    }
#>
    /// <typeparam name="TResult">The type of the result.</typeparam>
    /// <param name="iteratorItem">A parameter of type <typeparamref name="TIteratorItem" /> to pass to the method as an iterator variable.</param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
    /// <param name="param<#= j #>">A parameter of type <typeparamref name="TParam<#= j #>" /> to pass to the method at index <#= j - 1 #>. This parameter is passed by reference.</param>
<#
    }
#>
    /// <returns>The result of the method.</returns>
    public delegate TResult RefIteratorFunc<TIteratorItem, <#= paramTypes #>, TResult>(TIteratorItem iteratorItem, <#= paramNameTypes #>);

    /// <summary>
    /// A generic delegate for a method whose parameters are all marked as &quot;ref&quot;, usable with an iterator variable.
    /// </summary>
    /// <typeparam name="TIteratorItem">The type of the iterator variable.</typeparam>
<#
    for (int j = 1; j <= i; j++)
    {
#>
    /// <typeparam name="TParam<#= j #>">The type of the parameter at index <#= j - 1 #>.</typeparam>
<#
    }
#>
    /// <param name="iteratorItem">A parameter of type <typeparamref name="TIteratorItem" /> to pass to the method as an iterator variable.</param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
    /// <param name="param<#= j #>">A parameter of type <typeparamref name="TParam<#= j #>" /> to pass to the method at index <#= j - 1 #>. This parameter is passed by reference.</param>
<#
    }
#>
    public delegate void RefIteratorAction<TIteratorItem, <#= paramTypes #>>(TIteratorItem iteratorItem, <#= paramNameTypes #>);
<#
}
#>
}