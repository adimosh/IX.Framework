<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <copyright file="DisposableBase.InvokeIfNotDisposed.cs" company="Adrian Mos">
// Copyright (c) Adrian Mos with all rights reserved. Part of the IX Framework.
// </copyright>

using System;

namespace IX.StandardExtensions.ComponentModel
{
    /// <summary>
    /// An abstract base class for correctly implementing the disposable pattern.
    /// </summary>
    /// <seealso cref="System.IDisposable" />
    public abstract partial class DisposableBase : IDisposable
    {<#
for (int i = 1; i <= 8; i++)
{
    string[] types = new string[i];
    string[] names = new string[i];
    string[] nameTypes = new string[i];

    for (int j = 1; j <= i; j++)
    {
        int idx = j - 1;
        types[idx] = $"TParam{j}";
        names[idx] = $"param{j}";
        nameTypes[idx] = $"TParam{j} param{j}";
    }

    string paramTypes = string.Join(", ", types);
    string paramNames = string.Join(", ", names);
    string paramNameTypes = string.Join(", ", nameTypes);
#>

        /// <summary>
        /// Invokes an action if the current instance is not disposed.
        /// </summary>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <typeparam name="TParam<#= j #>">The type of parameter to be passed to the invoked method at index <#= j - 1 #>.</typeparam>
<#
    }
#>
        /// <param name="action">The action.</param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="param<#= j #>">A parameter of type <typeparamref name="TParam<#= j #>" /> to pass to the invoked method at index <#= j - 1 #>.</param>
<#
    }
#>
        /// <exception cref="ArgumentNullException"><paramref name="action" /> is <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
        protected void InvokeIfNotDisposed<<#= paramTypes #>>(Action<<#= paramTypes #>> action, <#= paramNameTypes #>)
        {
            this.ThrowIfCurrentObjectDisposed();

            (action ?? throw new ArgumentNullException()).Invoke(<#= paramNames #>);
        }

        /// <summary>
        /// Invokes an action if the current instance is not disposed.
        /// </summary>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <typeparam name="TParam<#= j #>">The type of parameter to be passed to the invoked method at index <#= j - 1 #>.</typeparam>
<#
    }
#>
        /// <typeparam name="TReturn">The return type of the invoked method.</typeparam>
        /// <param name="action">The action.</param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="param<#= j #>">A parameter of type <typeparamref name="TParam<#= j #>" /> to pass to the invoked method at index <#= j - 1 #>.</param>
<#
    }
#>
        /// <returns>A return value, as defined by the invoked method.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action" /> is <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
        protected TReturn InvokeIfNotDisposed<<#= paramTypes #>, TReturn>(Func<<#= paramTypes #>, TReturn> action, <#= paramNameTypes #>)
        {
            this.ThrowIfCurrentObjectDisposed();

            return (action ?? throw new ArgumentNullException()).Invoke(<#= paramNames #>);
        }
<#
}
#>
    }
}