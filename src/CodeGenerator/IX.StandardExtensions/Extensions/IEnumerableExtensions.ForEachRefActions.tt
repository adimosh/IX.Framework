<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <copyright file="IEnumerableExtensions.ForEachRefActions.cs" company="Adrian Mos">
// Copyright (c) Adrian Mos with all rights reserved. Part of the IX Framework.
// </copyright>

using System;
using System.Collections.Generic;
using IX.StandardExtensions.Contracts;
using IX.StandardExtensions.Efficiency;

namespace IX.StandardExtensions.Extensions
{
    /// <summary>
    /// Extensions for IEnumerable.
    /// </summary>
    // ReSharper disable once InconsistentNaming - We're doing extensions for IEnumerable
    public static partial class IEnumerableExtensions
    {
#pragma warning disable HAA0401 // Possible allocation of reference type enumerator - This is acceptable, as these are IEnumerable extensions<#
for (int i = 1; i <= 8; i++)
{
    for (int z = 1; z <= i; z++)
    {
        string[] types = new string[i];
        string[] names = new string[i];
        string[] nameTypes = new string[i];

        for (int j = 1; j <= i; j++)
        {
            int idx = j - 1;
            types[idx] = $"TParam{j}";
            if (j <= z)
            {
                names[idx] = $"ref param{j}";
                nameTypes[idx] = $"ref TParam{j} param{j}";
            }
            else
            {
                names[idx] = $"param{j}";
                nameTypes[idx] = $"TParam{j} param{j}";
            }
        }

        string paramTypes = string.Join(", ", types);
        string paramNames = string.Join(", ", names);
        string paramNameTypes = string.Join(", ", nameTypes);
#>

        /// <summary>
        /// Executes an action for each one of the elements of an enumerable.
        /// </summary>
        /// <typeparam name="TItem">The enumerable item type.</typeparam>
<#
        for (int j = 1; j <= i; j++)
        {
#>
        /// <typeparam name="TParam<#= j #>">The type of parameter to be passed to the invoked method at index <#= j - 1 #>.</typeparam>
<#
        }
#>
        /// <param name="source">The enumerable source.</param>
        /// <param name="action">The action to execute.</param>
<#
        for (int j = 1; j <= i; j++)
        {
            if (j <= z)
            {
#>
        /// <param name="param<#= j #>">A parameter of type <typeparamref name="TParam<#= j #>" /> to pass to the invoked method at index <#= j - 1 #>. This parameter is passed by reference.</param>
<#
            }
            else
            {
#>
        /// <param name="param<#= j #>">A parameter of type <typeparamref name="TParam<#= j #>" /> to pass to the invoked method at index <#= j - 1 #>.</param>
<#
            }
        }
#>
        /// <exception cref="ArgumentNullException">Thrown when <paramref name="source" /> or <paramref name="action" /> is <see langword="null"/> (<see langword="Nothing"/> in Visual Basic).</exception>
<#
        if (i != z)
        {
#>
        public static void ForEach<TItem, <#= paramTypes #>>(this IEnumerable<TItem> source, RefIteratorAction<#= i - z #><TItem, <#= paramTypes #>> action, <#= paramNameTypes #>)
<#
        }
        else
        {
#>
        public static void ForEach<TItem, <#= paramTypes #>>(this IEnumerable<TItem> source, RefIteratorAction<TItem, <#= paramTypes #>> action, <#= paramNameTypes #>)
<#
        }
#>
        {
            Contract.RequiresNotNull(
                in source,
                nameof(source));
            Contract.RequiresNotNull(
                in action,
                nameof(action));

            foreach (TItem item in source)
            {
                action(item, <#= paramNames #>);
            }
        }
<#
    }
}
#>
#pragma warning restore HAA0401 // Possible allocation of reference type enumerator
    }
}