<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="..\..\StandardTypes.tt" #><#@ include file="..\..\Fixture.tt" #>
<#@ output extension=".cs" #>
// <copyright file="ArrayExtensions.StandardTypes.cs" company="Adrian Mos">
// Copyright (c) Adrian Mos with all rights reserved. Part of the IX Framework.
// </copyright>

using System;
using IX.StandardExtensions.Contracts;

namespace IX.StandardExtensions.Extensions
{
    /// <summary>
    ///     Extensions for array types.
    /// </summary>
    public static partial class ArrayExtensions
    {<#
List<string> code = new List<string>();

foreach (var typ in types.Where(p => p != typeof(byte[])))
{
    string fullTypeName = GetTypeUsableName(typ);
#>

        /// <summary>
        ///     Deep clones an array.
        /// </summary>
        /// <param name="source">The source array to deep clone.</param>
        /// <returns>An array of deeply-copied elements from the original array.</returns>
        /// <exception cref="ArgumentNullException">
        ///     <paramref name="source" /> is <see langword="null"/> (<see langword="Nothing"/> in Visual Basic).
        /// </exception>
        public static <#= fullTypeName #>[] DeepClone(this <#= fullTypeName #>[] source)
        {
            Contract.RequiresNotNull(
                in source,
                nameof(source));

            var length = source.Length;

            var destination = new <#= fullTypeName #>[length];

            for (var i = 0; i < length; i++)
            {
                destination[i] = source[i];
            }

            return destination;
        }
<#
}
#>
    }
}