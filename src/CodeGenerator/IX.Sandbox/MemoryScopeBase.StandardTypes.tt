<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="..\StandardTypes.tt" #><#@ include file="..\Fixture.tt" #>
<#@ output extension=".cs" #>
// <copyright file="MemoryScopeBase.StandardTypes.cs" company="Adrian Mos">
// Copyright (c) Adrian Mos with all rights reserved. Part of the IX Framework.
// </copyright>

using System;
using IX.Abstractions.Memory;
using IX.StandardExtensions;

namespace IX.Sandbox.Memory
{
    /// <summary>
    /// A memory scope.
    /// </summary>
    /// <seealso cref="IX.StandardExtensions.ComponentModel.ViewModelBase" />
    /// <seealso cref="IX.Abstractions.Memory.IScope" />
    public abstract partial class MemoryScopeBase
    {<#
List<string> code = new List<string>();

foreach (var typ in types)
{
    string typeName = GetTypeDisplayName(typ);
    string fullTypeName = GetTypeUsableName(typ);
#>

        /// <summary>
        /// Creates a named variable, or reassigns if one is found with the same name.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="value">The value.</param>
        /// <returns>The named variable, new or existing.</returns>
        public INamedVariable CreateNamed<#= typeName #>Variable(string name, <#= fullTypeName #> value)
            => this.variables.CreateOrChangeState(
                name,
                (nameL1, valueL1, scL1) => new Named<#= typeName #>Variable(nameL1, valueL1, scL1),
                (var, nameL1, valueL1, scL1) =>
                {
                    if (!(var is Named<#= typeName #>Variable nbv))
                    {
                        throw new ArgumentInvalidTypeException(nameof(name));
                    }
                    else
                    {
                        nbv.Value = valueL1;
                    }
                },
                name,
                value,
                this.SynchronizationContext);

        /// <summary>
        /// Creates an unnamed variable, or reassigns if one is found with the same name.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns>The named variable, new or existing.</returns>
        public IVariable Create<#= typeName #>Variable(<#= fullTypeName #> value)
        {
            var newVariable = new <#= typeName #>Variable(value, this.SynchronizationContext);

            this.unnamedVariables.Add(newVariable);

            return newVariable;
        }
<#
}
#>
    }
}