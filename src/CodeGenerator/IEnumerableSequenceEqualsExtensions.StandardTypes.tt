<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="StandardTypes.tt" #><#@ include file="Fixture.tt" #>
<#@ output extension=".cs" #>
// <copyright file="IEnumerableSequenceEqualsExtensions.StandardTypes.cs" company="Adrian Mos">
// Copyright (c) Adrian Mos with all rights reserved. Part of the IX Framework.
// </copyright>

using System;
using System.Collections.Generic;

namespace IX.StandardExtensions
{
    /// <summary>
    /// SequenceEquals extensions for IEnumerable.
    /// </summary>
    public static partial class IEnumerableSequenceEqualsExtensions
    {<#
List<string> code = new List<string>();

foreach (var typ in types.Where(p => p != typeof(byte[])))
{
    string fullTypeName = GetTypeUsableName(typ);
#>

        /// <summary>
        /// Determines whether two enumerable objects have all members in sequence equal to one another.
        /// </summary>
        /// <param name="left">The left operand enumerable.</param>
        /// <param name="right">The right operand enumerable.</param>
        /// <returns><c>true</c> if the two enumerable objects have the same length and each element at each position
        /// in one enumerable is equal to the equivalent in the other, <c>false</c> otherwise.</returns>
        public static bool SequenceEquals(this IEnumerable<<#= fullTypeName #>> left, IEnumerable<<#= fullTypeName #>> right)
        {
            if ((left == null) ? (right != null) : (right == null))
            {
                return false;
            }

            using (IEnumerator<<#= fullTypeName #>> e1 = left.GetEnumerator())
            {
                using (IEnumerator<<#= fullTypeName #>> e2 = right.GetEnumerator())
                {
                    while (true)
                    {
                        var b1 = e1.MoveNext();
                        var b2 = e2.MoveNext();

                        if (b1 != b2)
                        {
                            return false;
                        }

                        if (b1)
                        {
                            if (e1.Current != e2.Current)
                            {
                                return false;
                            }
                        }
                        else
                        {
                            return true;
                        }
                    }
                }
            }
        }
<#
}
#>
    }
}