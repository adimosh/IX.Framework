<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="StandardTypes.tt" #><#@ include file="Fixture.tt" #>
<#@ output extension=".cs" #>
// <copyright file="IListCloneExtensions.StandardTypes.cs" company="Adrian Mos">
// Copyright (c) Adrian Mos with all rights reserved. Part of the IX Framework.
// </copyright>

using System;
using System.Collections.Generic;

namespace IX.StandardExtensions
{
    /// <summary>
    /// Extensions for IList.
    /// </summary>
    public static partial class IListCloneExtensions
    {<#
List<string> code = new List<string>();

foreach (var typ in types.Where(p => p != typeof(byte[])))
{
    string fullTypeName = GetTypeUsableName(typ);
#>

        /// <summary>
        /// Deep clones the list.
        /// </summary>
        /// <param name="list">The list to clone.</param>
        /// <returns>
        /// A cloned list.
        /// </returns>
        /// <exception cref="System.ArgumentNullException"><paramref name="list"/> is <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
        public static List<<#= fullTypeName #>> DeepClone(this List<<#= fullTypeName #>> list)
        {
            if (list == null)
            {
                throw new ArgumentNullException(nameof(list));
            }

            return new List<<#= fullTypeName #>>(list);
        }
<#
}
#>
    }
}