<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <copyright file="ConcurrentObservableDictionary{TKey,TValue}.ActionsAndFuncs.cs" company="Adrian Mos">
// Copyright (c) Adrian Mos with all rights reserved. Part of the IX Framework.
// </copyright>

using System;
using System.Collections.Generic;
using IX.StandardExtensions.Threading;

namespace IX.Observable
{
#pragma warning disable SA1601 // Partial elements should be documented
    public partial class ConcurrentObservableDictionary<TKey, TValue>
#pragma warning restore SA1601 // Partial elements should be documented
    {<#
for (int i = 1; i <= 8; i++)
{
    string[] types = new string[i];
    string[] names = new string[i];
    string[] nameTypes = new string[i];
    string[] parameters = new string[i];

    for (int j = 1; j <= i; j++)
    {
        int idx = j - 1;
        types[idx] = $"TParam{j}";
        names[idx] = $"param{j}";
        nameTypes[idx] = $"TParam{j} param{j}";
        if (idx != 7)
        {
            parameters[idx] = $"unpackedParameters.Item{j}";
        }
        else
        {
            parameters[idx] = "unpackedParameters.Rest";
        }
    }

    string paramTypes = string.Join(", ", types);
    string paramNames = string.Join(", ", names);
    string paramNameTypes = string.Join(", ", nameTypes);
    string paramParameters = string.Join(", ", parameters);
#>

        /// <summary>
        /// Gets a value from the dictionary, optionally generating one if the key is not found.
        /// </summary>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <typeparam name="TParam<#= j #>">The type of parameter to be passed to the invoked method at index <#= j - 1 #>.</typeparam>
<#
    }
#>
        /// <param name="key">The key.</param>
        /// <param name="valueGenerator">The value generator.</param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="param<#= j #>">A parameter of type <typeparamref name="TParam<#= j #>" /> to pass to the invoked method at index <#= j - 1 #>.</param>
<#
    }
#>
        /// <returns>The value corresponding to the key, that is guaranteed to exist in the dictionary after this method.</returns>
        /// <remarks>
        /// <para>The <paramref name="valueGenerator" /> method is guaranteed to not be invoked if the key exists.</para>
        /// <para>When the <paramref name="valueGenerator" /> method is invoked, it will be invoked within the write lock. Please ensure that no member of the dictionary is called within it.</para>
        /// </remarks>
        public TValue GetOrAdd<<#= paramTypes #>>(TKey key, Func<<#= paramTypes #>, TValue> valueGenerator, <#= paramNameTypes #>)
        {
            // PRECONDITIONS

            // Current object not disposed
            this.ThrowIfCurrentObjectDisposed();

            // ACTION
            int newIndex;
            TValue value;

            // Under read/write lock
            using (ReadWriteSynchronizationLocker rwl = this.ReadWriteLock())
            {
                if (this.InternalContainer.TryGetValue(key, out value))
                {
                    // Within read lock, if the key is found, return the value.
                    return value;
                }
                else
                {
                    rwl.Upgrade();

                    if (this.InternalContainer.TryGetValue(key, out value))
                    {
                        // Re-check within a write lock, to ensure that something else hasn't already added it.
                        return value;
                    }

                    // Generate the value
                    value = valueGenerator(<#= paramNames #>);

                    // Add the item
                    newIndex = this.InternalContainer.Add(key, value);
                }
            }

            // NOTIFICATIONS

            // Collection changed
            if (newIndex == -1)
            {
                // If no index could be found for an item (Dictionary add)
                this.RaiseCollectionReset();
            }
            else
            {
                // If index was added at a specific index
                this.RaiseCollectionChangedAdd(new KeyValuePair<TKey, TValue>(key, value), newIndex);
            }

            // Property changed
            this.RaisePropertyChanged(nameof(this.Count));

            // Contents may have changed
            this.ContentsMayHaveChanged();

            return value;
        }

        /// <summary>
        /// Creates an item or changes its state, if one exists.
        /// </summary>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <typeparam name="TParam<#= j #>">The type of parameter to be passed to the invoked method at index <#= j - 1 #>.</typeparam>
<#
    }
#>
        /// <param name="key">The key.</param>
        /// <param name="valueGenerator">The value generator.</param>
        /// <param name="valueAction">The value action.</param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="param<#= j #>">A parameter of type <typeparamref name="TParam<#= j #>" /> to pass to the invoked method at index <#= j - 1 #>.</param>
<#
    }
#>
        /// <returns>The created or state-changed item.</returns>
        public TValue CreateOrChangeState<<#= paramTypes #>>(TKey key, Func<<#= paramTypes #>, TValue> valueGenerator, Action<TValue, <#= paramTypes #>> valueAction, <#= paramNameTypes #>)
        {
            // PRECONDITIONS

            // Current object not disposed
            this.ThrowIfCurrentObjectDisposed();

            // ACTION
            int newIndex;
            TValue value;

            // Under read/write lock
            using (ReadWriteSynchronizationLocker rwl = this.ReadWriteLock())
            {
                if (this.InternalContainer.TryGetValue(key, out value))
                {
                    // Within read lock, if the key is found, return the value.
                    valueAction(value, <#= paramNames #>);
                    return value;
                }
                else
                {
                    rwl.Upgrade();

                    if (this.InternalContainer.TryGetValue(key, out value))
                    {
                        // Re-check within a write lock, to ensure that something else hasn't already added it.
                        valueAction(value, <#= paramNames #>);
                        return value;
                    }

                    // Generate the value
                    value = valueGenerator(<#= paramNames #>);

                    // Add the item
                    newIndex = this.InternalContainer.Add(key, value);
                }
            }

            // NOTIFICATIONS

            // Collection changed
            if (newIndex == -1)
            {
                // If no index could be found for an item (Dictionary add)
                this.RaiseCollectionReset();
            }
            else
            {
                // If index was added at a specific index
                this.RaiseCollectionChangedAdd(new KeyValuePair<TKey, TValue>(key, value), newIndex);
            }

            // Property changed
            this.RaisePropertyChanged(nameof(this.Count));

            // Contents may have changed
            this.ContentsMayHaveChanged();

            return value;
        }

        /// <summary>
        /// Removes a key from the dictionary, then acts on its resulting value.
        /// </summary>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <typeparam name="TParam<#= j #>">The type of parameter to be passed to the invoked method at index <#= j - 1 #>.</typeparam>
<#
    }
#>
        /// <param name="key">The key.</param>
        /// <param name="action">The action.</param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="param<#= j #>">A parameter of type <typeparamref name="TParam<#= j #>" /> to pass to the invoked method at index <#= j - 1 #>.</param>
<#
    }
#>
        public void RemoveThenAct<<#= paramTypes #>>(TKey key, Action<TValue, <#= paramTypes #>> action, <#= paramNameTypes #>)
        {
            // PRECONDITIONS

            // Current object not disposed
            this.ThrowIfCurrentObjectDisposed();

            // ACTION
            int oldIndex;
            TValue value;

            // Under read/write lock
            using (ReadWriteSynchronizationLocker rwl = this.ReadWriteLock())
            {
                if (this.InternalContainer.TryGetValue(key, out value))
                {
                    rwl.Upgrade();

                    if (this.InternalContainer.TryGetValue(key, out value))
                    {
                        // Re-check within a write lock, to ensure that something else hasn't already removed it.
                        oldIndex = this.InternalContainer.Remove(new KeyValuePair<TKey, TValue>(key, value));

                        action(value, <#= paramNames #>);
                    }
                    else
                    {
                        return;
                    }
                }
                else
                {
                    return;
                }
            }

            // NOTIFICATIONS

            // Collection changed
            if (oldIndex == -1)
            {
                // If no index could be found for an item (Dictionary remove)
                this.RaiseCollectionReset();
            }
            else
            {
                // If index was added at a specific index
                this.RaiseCollectionChangedRemove(new KeyValuePair<TKey, TValue>(key, value), oldIndex);
            }

            // Property changed
            this.RaisePropertyChanged(nameof(this.Count));

            // Contents may have changed
            this.ContentsMayHaveChanged();
        }
<#
}
#>
    }
}