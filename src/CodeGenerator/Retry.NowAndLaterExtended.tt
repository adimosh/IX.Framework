<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <copyright file="Retry.NowAndLaterExtended.cs" company="Adrian Mos">
// Copyright (c) Adrian Mos with all rights reserved. Part of the IX Framework.
// </copyright>

using System;
using System.Threading;
using System.Threading.Tasks;
using IX.Retry.Contexts;
using IX.StandardExtensions.Contracts;

namespace IX.Retry
{
    /// <summary>
    /// A class for containing retry operations.
    /// </summary>
    public static partial class Retry
    {
#pragma warning disable HAA0301 // Closure Allocation Source - These are acceptable given the purpose of this code
#pragma warning disable HAA0303 // Lambda or anonymous method in a generic method allocates a delegate instance
#pragma warning disable HAA0302 // Display class allocation to capture closure
#pragma warning disable HAA0603 // Delegate allocation from a method group<#
for (int i = 1; i <= 8; i++)
{
    string[] types = new string[i];
    string[] names = new string[i];
    string[] nameTypes = new string[i];

    for (int j = 1; j <= i; j++)
    {
        int idx = j - 1;
        types[idx] = $"TParam{j}";
        names[idx] = $"param{j}";
        nameTypes[idx] = $"TParam{j} param{j}";
    }

    string paramTypes = string.Join(", ", types);
    string paramNames = string.Join(", ", names);
    string paramNameTypes = string.Join(", ", nameTypes);
#>

        /// <summary>
        /// Retry now, with a default set of options.
        /// </summary>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <typeparam name="TParam<#= j #>">The type of parameter to be passed to the retried method at index <#= j - 1 #>.</typeparam>
<#
    }
#>
        /// <param name="action">The action to try and retry.</param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="param<#= j #>">A parameter of type <typeparamref name="TParam<#= j #>" /> to pass to the retried method at index <#= j - 1 #>.</param>
<#
    }
#>
        /// <param name="cancellationToken">The current operation's cancellation token.</param>
        public static void Now<<#= paramTypes #>>(Action<<#= paramTypes #>> action, <#= paramNameTypes #>, CancellationToken cancellationToken = default)
        {
            Contract.RequiresNotNull(action, nameof(action));

            Run(action, <#= paramNames #>, new RetryOptions(), cancellationToken);
        }

        /// <summary>
        /// Retry now, asynchronously, with an optional cancellation token.
        /// </summary>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <typeparam name="TParam<#= j #>">The type of parameter to be passed to the retried method at index <#= j - 1 #>.</typeparam>
<#
    }
#>
        /// <param name="action">The action to try and retry.</param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="param<#= j #>">A parameter of type <typeparamref name="TParam<#= j #>" /> to pass to the retried method at index <#= j - 1 #>.</param>
<#
    }
#>
        /// <param name="cancellationToken">The current operation's cancellation token.</param>
        /// <returns>A <see cref="System.Threading.Tasks.Task" /> that can be awaited on.</returns>
        public static Task NowAsync<<#= paramTypes #>>(Action<<#= paramTypes #>> action, <#= paramNameTypes #>, CancellationToken cancellationToken = default)
        {
            Contract.RequiresNotNull(action, nameof(action));

            return RunAsync(action, <#= paramNames #>, new RetryOptions(), cancellationToken);
        }

        /// <summary>
        /// Retry now, with specified options.
        /// </summary>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <typeparam name="TParam<#= j #>">The type of parameter to be passed to the retried method at index <#= j - 1 #>.</typeparam>
<#
    }
#>
        /// <param name="action">The action to try and retry.</param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="param<#= j #>">A parameter of type <typeparamref name="TParam<#= j #>" /> to pass to the retried method at index <#= j - 1 #>.</param>
<#
    }
#>
        /// <param name="options">The retry options.</param>
        /// <param name="cancellationToken">The current operation's cancellation token.</param>
        public static void Now<<#= paramTypes #>>(Action<<#= paramTypes #>> action, <#= paramNameTypes #>, RetryOptions options, CancellationToken cancellationToken = default)
        {
            Contract.RequiresNotNull(action, nameof(action));
            Contract.RequiresNotNull(options, nameof(options));

            Run(action, <#= paramNames #>, options, cancellationToken);
        }

        /// <summary>
        /// Retry now, asynchronously, with specified options and an optional cancellation token.
        /// </summary>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <typeparam name="TParam<#= j #>">The type of parameter to be passed to the retried method at index <#= j - 1 #>.</typeparam>
<#
    }
#>
        /// <param name="action">The action to try and retry.</param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="param<#= j #>">A parameter of type <typeparamref name="TParam<#= j #>" /> to pass to the retried method at index <#= j - 1 #>.</param>
<#
    }
#>
        /// <param name="options">The retry options.</param>
        /// <param name="cancellationToken">The current operation's cancellation token.</param>
        /// <returns>A <see cref="System.Threading.Tasks.Task" /> that can be awaited on.</returns>
        public static Task NowAsync<<#= paramTypes #>>(Action<<#= paramTypes #>> action, <#= paramNameTypes #>, RetryOptions options, CancellationToken cancellationToken = default)
        {
            Contract.RequiresNotNull(action, nameof(action));
            Contract.RequiresNotNull(options, nameof(options));

            return RunAsync(action, <#= paramNames #>, options, cancellationToken);
        }

        /// <summary>
        /// Retry now, with a method to build up options.
        /// </summary>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <typeparam name="TParam<#= j #>">The type of parameter to be passed to the retried method at index <#= j - 1 #>.</typeparam>
<#
    }
#>
        /// <param name="action">The action to try and retry.</param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="param<#= j #>">A parameter of type <typeparamref name="TParam<#= j #>" /> to pass to the retried method at index <#= j - 1 #>.</param>
<#
    }
#>
        /// <param name="optionsSetter">A method to build up options on the fly.</param>
        /// <param name="cancellationToken">The current operation's cancellation token.</param>
        public static void Now<<#= paramTypes #>>(Action<<#= paramTypes #>> action, <#= paramNameTypes #>, Action<RetryOptions> optionsSetter, CancellationToken cancellationToken = default)
        {
            Contract.RequiresNotNull(action, nameof(action));
            Contract.RequiresNotNull(optionsSetter, nameof(optionsSetter));

            var options = new RetryOptions();
            optionsSetter(options);

            Run(action, <#= paramNames #>, options, cancellationToken);
        }

        /// <summary>
        /// Retry now, asynchronously, with a method to build up options and an optional cancellation token.
        /// </summary>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <typeparam name="TParam<#= j #>">The type of parameter to be passed to the retried method at index <#= j - 1 #>.</typeparam>
<#
    }
#>
        /// <param name="action">The action to try and retry.</param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="param<#= j #>">A parameter of type <typeparamref name="TParam<#= j #>" /> to pass to the retried method at index <#= j - 1 #>.</param>
<#
    }
#>
        /// <param name="optionsSetter">A method to build up options on the fly.</param>
        /// <param name="cancellationToken">The current operation's cancellation token.</param>
        /// <returns>A <see cref="System.Threading.Tasks.Task" /> that can be awaited on.</returns>
        public static Task NowAsync<<#= paramTypes #>>(Action<<#= paramTypes #>> action, <#= paramNameTypes #>, Action<RetryOptions> optionsSetter, CancellationToken cancellationToken = default)
        {
            Contract.RequiresNotNull(action, nameof(action));
            Contract.RequiresNotNull(optionsSetter, nameof(optionsSetter));

            var options = new RetryOptions();
            optionsSetter(options);

            return RunAsync(action, <#= paramNames #>, options, cancellationToken);
        }

        /// <summary>
        /// Retry an action later.
        /// </summary>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <typeparam name="TParam<#= j #>">The type of parameter to be passed to the retried method at index <#= j - 1 #>.</typeparam>
<#
    }
#>
        /// <param name="action">The action to try and retry.</param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="param<#= j #>">A parameter of type <typeparamref name="TParam<#= j #>" /> to pass to the retried method at index <#= j - 1 #>.</param>
<#
    }
#>
        /// <param name="cancellationToken">The current operation's cancellation token.</param>
        /// <returns>An <see cref="System.Action" /> that can be executed whenever required.</returns>
        /// <remarks>
        /// <para>Please be advised that, in order to properly function, this method creates a closure.</para>
        /// <para>For now, this is unavoidable.</para>
        /// <para>If you would like to avoid the creation of a closure, please use, instead, the <see cref="Now{<#= paramTypes #>}(Action{<#= paramTypes #>}, <#= paramTypes #>, CancellationToken)"/> method and implement the delay of action yourself.</para>
        /// </remarks>
        public static Action Later<<#= paramTypes #>>(Action<<#= paramTypes #>> action, <#= paramNameTypes #>, CancellationToken cancellationToken = default)
        {
            Contract.RequiresNotNull(action, nameof(action));

            return () => Run(action, <#= paramNames #>, new RetryOptions(), cancellationToken);
        }

        /// <summary>
        /// Retry an action later, with retry options.
        /// </summary>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <typeparam name="TParam<#= j #>">The type of parameter to be passed to the retried method at index <#= j - 1 #>.</typeparam>
<#
    }
#>
        /// <param name="action">The action to try and retry.</param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="param<#= j #>">A parameter of type <typeparamref name="TParam<#= j #>" /> to pass to the retried method at index <#= j - 1 #>.</param>
<#
    }
#>
        /// <param name="options">The retry options.</param>
        /// <param name="cancellationToken">The current operation's cancellation token.</param>
        /// <returns>An <see cref="System.Action" /> that can be executed whenever required.</returns>
        /// <remarks>
        /// <para>Please be advised that, in order to properly function, this method creates a closure.</para>
        /// <para>For now, this is unavoidable.</para>
        /// <para>If you would like to avoid the creation of a closure, please use, instead, the <see cref="Now{<#= paramTypes #>}(Action{<#= paramTypes #>}, <#= paramTypes #>, RetryOptions, CancellationToken)"/> method and implement the delay of action yourself.</para>
        /// </remarks>
        public static Action Later<<#= paramTypes #>>(Action<<#= paramTypes #>> action, <#= paramNameTypes #>, RetryOptions options, CancellationToken cancellationToken = default)
        {
            Contract.RequiresNotNull(action, nameof(action));
            Contract.RequiresNotNull(options, nameof(options));

            return () => Run(action, <#= paramNames #>, options, cancellationToken);
        }

        /// <summary>
        /// Retry an action later, with a method to build up options.
        /// </summary>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <typeparam name="TParam<#= j #>">The type of parameter to be passed to the retried method at index <#= j - 1 #>.</typeparam>
<#
    }
#>
        /// <param name="action">The action to try and retry.</param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="param<#= j #>">A parameter of type <typeparamref name="TParam<#= j #>" /> to pass to the retried method at index <#= j - 1 #>.</param>
<#
    }
#>
        /// <param name="optionsSetter">A method to build up options on the fly.</param>
        /// <param name="cancellationToken">The current operation's cancellation token.</param>
        /// <returns>An <see cref="System.Action" /> that can be executed whenever required.</returns>
        /// <remarks>
        /// <para>Please be advised that, in order to properly function, this method creates a closure.</para>
        /// <para>For now, this is unavoidable.</para>
        /// <para>If you would like to avoid the creation of a closure, please use, instead, the <see cref="Now{<#= paramTypes #>}(Action{<#= paramTypes #>}, <#= paramTypes #>, Action{RetryOptions}, CancellationToken)"/> method and implement the delay of action yourself.</para>
        /// </remarks>
        public static Action Later<<#= paramTypes #>>(Action<<#= paramTypes #>> action, <#= paramNameTypes #>, Action<RetryOptions> optionsSetter, CancellationToken cancellationToken = default)
        {
            Contract.RequiresNotNull(action, nameof(action));
            Contract.RequiresNotNull(optionsSetter, nameof(optionsSetter));

            var options = new RetryOptions();
            optionsSetter(options);

            return () => Run(action, <#= paramNames #>, options);
        }

        /// <summary>
        /// Retry now, with a default set of options.
        /// </summary>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <typeparam name="TParam<#= j #>">The type of parameter to be passed to the retried method at index <#= j - 1 #>.</typeparam>
<#
    }
#>
        /// <typeparam name="TReturn">The return type of the invoked method.</typeparam>
        /// <param name="func">The action to try and retry.</param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="param<#= j #>">A parameter of type <typeparamref name="TParam<#= j #>" /> to pass to the retried method at index <#= j - 1 #>.</param>
<#
    }
#>
        /// <param name="cancellationToken">The current operation's cancellation token.</param>
        /// <returns>A return value, as defined by the invoked method.</returns>
        public static TReturn Now<<#= paramTypes #>, TReturn>(Func<<#= paramTypes #>, TReturn> func, <#= paramNameTypes #>, CancellationToken cancellationToken = default)
        {
            Contract.RequiresNotNull(func, nameof(func));

            return Run(func, <#= paramNames #>, new RetryOptions(), cancellationToken);
        }

        /// <summary>
        /// Retry now, asynchronously, with an optional cancellation token.
        /// </summary>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <typeparam name="TParam<#= j #>">The type of parameter to be passed to the retried method at index <#= j - 1 #>.</typeparam>
<#
    }
#>
        /// <typeparam name="TReturn">The return type of the invoked method.</typeparam>
        /// <param name="func">The action to try and retry.</param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="param<#= j #>">A parameter of type <typeparamref name="TParam<#= j #>" /> to pass to the retried method at index <#= j - 1 #>.</param>
<#
    }
#>
        /// <param name="cancellationToken">The current operation's cancellation token.</param>
        /// <returns>A <see cref="System.Threading.Tasks.Task{TResult}" /> that can be awaited on, with a result as defined by the invoked method.</returns>
        public static Task<TReturn> NowAsync<<#= paramTypes #>, TReturn>(Func<<#= paramTypes #>, TReturn> func, <#= paramNameTypes #>, CancellationToken cancellationToken = default)
        {
            Contract.RequiresNotNull(func, nameof(func));

            return RunAsync(func, <#= paramNames #>, new RetryOptions(), cancellationToken);
        }

        /// <summary>
        /// Retry now, with specified options.
        /// </summary>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <typeparam name="TParam<#= j #>">The type of parameter to be passed to the retried method at index <#= j - 1 #>.</typeparam>
<#
    }
#>
        /// <typeparam name="TReturn">The return type of the invoked method.</typeparam>
        /// <param name="func">The action to try and retry.</param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="param<#= j #>">A parameter of type <typeparamref name="TParam<#= j #>" /> to pass to the retried method at index <#= j - 1 #>.</param>
<#
    }
#>
        /// <param name="options">The retry options.</param>
        /// <param name="cancellationToken">The current operation's cancellation token.</param>
        /// <returns>A return value, as defined by the invoked method.</returns>
        public static TReturn Now<<#= paramTypes #>, TReturn>(Func<<#= paramTypes #>, TReturn> func, <#= paramNameTypes #>, RetryOptions options, CancellationToken cancellationToken = default)
        {
            Contract.RequiresNotNull(func, nameof(func));
            Contract.RequiresNotNull(options, nameof(options));

            return Run(func, <#= paramNames #>, options, cancellationToken);
        }

        /// <summary>
        /// Retry now, asynchronously, with specified options and an optional cancellation token.
        /// </summary>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <typeparam name="TParam<#= j #>">The type of parameter to be passed to the retried method at index <#= j - 1 #>.</typeparam>
<#
    }
#>
        /// <typeparam name="TReturn">The return type of the invoked method.</typeparam>
        /// <param name="func">The action to try and retry.</param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="param<#= j #>">A parameter of type <typeparamref name="TParam<#= j #>" /> to pass to the retried method at index <#= j - 1 #>.</param>
<#
    }
#>
        /// <param name="options">The retry options.</param>
        /// <param name="cancellationToken">The current operation's cancellation token.</param>
        /// <returns>A <see cref="System.Threading.Tasks.Task{TResult}" /> that can be awaited on, with a result as defined by the invoked method.</returns>
        public static Task<TReturn> NowAsync<<#= paramTypes #>, TReturn>(Func<<#= paramTypes #>, TReturn> func, <#= paramNameTypes #>, RetryOptions options, CancellationToken cancellationToken = default)
        {
            Contract.RequiresNotNull(func, nameof(func));
            Contract.RequiresNotNull(options, nameof(options));

            return RunAsync(func, <#= paramNames #>, options, cancellationToken);
        }

        /// <summary>
        /// Retry now, with a method to build up options.
        /// </summary>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <typeparam name="TParam<#= j #>">The type of parameter to be passed to the retried method at index <#= j - 1 #>.</typeparam>
<#
    }
#>
        /// <typeparam name="TReturn">The return type of the invoked method.</typeparam>
        /// <param name="func">The action to try and retry.</param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="param<#= j #>">A parameter of type <typeparamref name="TParam<#= j #>" /> to pass to the retried method at index <#= j - 1 #>.</param>
<#
    }
#>
        /// <param name="optionsSetter">A method to build up options on the fly.</param>
        /// <param name="cancellationToken">The current operation's cancellation token.</param>
        /// <returns>A return value, as defined by the invoked method.</returns>
        public static TReturn Now<<#= paramTypes #>, TReturn>(Func<<#= paramTypes #>, TReturn> func, <#= paramNameTypes #>, Action<RetryOptions> optionsSetter, CancellationToken cancellationToken = default)
        {
            Contract.RequiresNotNull(func, nameof(func));
            Contract.RequiresNotNull(optionsSetter, nameof(optionsSetter));

            var options = new RetryOptions();
            optionsSetter(options);

            return Run(func, <#= paramNames #>, options, cancellationToken);
        }

        /// <summary>
        /// Retry now, asynchronously, with a method to build up options and an optional cancellation token.
        /// </summary>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <typeparam name="TParam<#= j #>">The type of parameter to be passed to the retried method at index <#= j - 1 #>.</typeparam>
<#
    }
#>
        /// <typeparam name="TReturn">The return type of the invoked method.</typeparam>
        /// <param name="func">The action to try and retry.</param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="param<#= j #>">A parameter of type <typeparamref name="TParam<#= j #>" /> to pass to the retried method at index <#= j - 1 #>.</param>
<#
    }
#>
        /// <param name="optionsSetter">A method to build up options on the fly.</param>
        /// <param name="cancellationToken">The current operation's cancellation token.</param>
        /// <returns>A <see cref="System.Threading.Tasks.Task{TResult}" /> that can be awaited on, with a result as defined by the invoked method.</returns>
        public static Task<TReturn> NowAsync<<#= paramTypes #>, TReturn>(Func<<#= paramTypes #>, TReturn> func, <#= paramNameTypes #>, Action<RetryOptions> optionsSetter, CancellationToken cancellationToken = default)
        {
            Contract.RequiresNotNull(func, nameof(func));
            Contract.RequiresNotNull(optionsSetter, nameof(optionsSetter));

            var options = new RetryOptions();
            optionsSetter(options);

            return RunAsync(func, <#= paramNames #>, options, cancellationToken);
        }

        /// <summary>
        /// Retry an action later.
        /// </summary>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <typeparam name="TParam<#= j #>">The type of parameter to be passed to the retried method at index <#= j - 1 #>.</typeparam>
<#
    }
#>
        /// <typeparam name="TReturn">The return type of the invoked method.</typeparam>
        /// <param name="func">The action to try and retry.</param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="param<#= j #>">A parameter of type <typeparamref name="TParam<#= j #>" /> to pass to the retried method at index <#= j - 1 #>.</param>
<#
    }
#>
        /// <param name="cancellationToken">The current operation's cancellation token.</param>
        /// <returns>An <see cref="System.Func{TResult}" /> that can be executed whenever required.</returns>
        /// <remarks>
        /// <para>Please be advised that, in order to properly function, this method creates a closure.</para>
        /// <para>For now, this is unavoidable.</para>
        /// <para>If you would like to avoid the creation of a closure, please use, instead, the <see cref="Now{<#= paramTypes #>, TReturn}(Func{<#= paramTypes #>, TReturn}, <#= paramTypes #>, CancellationToken)"/> method and implement the delay of action yourself.</para>
        /// </remarks>
        public static Func<TReturn> Later<<#= paramTypes #>, TReturn>(Func<<#= paramTypes #>, TReturn> func, <#= paramNameTypes #>, CancellationToken cancellationToken = default)
        {
            Contract.RequiresNotNull(func, nameof(func));

            return () => Run(func, <#= paramNames #>, new RetryOptions(), cancellationToken);
        }

        /// <summary>
        /// Retry an action later, with retry options.
        /// </summary>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <typeparam name="TParam<#= j #>">The type of parameter to be passed to the retried method at index <#= j - 1 #>.</typeparam>
<#
    }
#>
        /// <typeparam name="TReturn">The return type of the invoked method.</typeparam>
        /// <param name="func">The action to try and retry.</param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="param<#= j #>">A parameter of type <typeparamref name="TParam<#= j #>" /> to pass to the retried method at index <#= j - 1 #>.</param>
<#
    }
#>
        /// <param name="options">The retry options.</param>
        /// <param name="cancellationToken">The current operation's cancellation token.</param>
        /// <returns>An <see cref="System.Func{TResult}" /> that can be executed whenever required.</returns>
        /// <remarks>
        /// <para>Please be advised that, in order to properly function, this method creates a closure.</para>
        /// <para>For now, this is unavoidable.</para>
        /// <para>If you would like to avoid the creation of a closure, please use, instead, the <see cref="Now{<#= paramTypes #>, TReturn}(Func{<#= paramTypes #>, TReturn}, <#= paramTypes #>, RetryOptions, CancellationToken)"/> method and implement the delay of action yourself.</para>
        /// </remarks>
        public static Func<TReturn> Later<<#= paramTypes #>, TReturn>(Func<<#= paramTypes #>, TReturn> func, <#= paramNameTypes #>, RetryOptions options, CancellationToken cancellationToken = default)
        {
            Contract.RequiresNotNull(func, nameof(func));
            Contract.RequiresNotNull(options, nameof(options));

            return () => Run(func, <#= paramNames #>, options, cancellationToken);
        }

        /// <summary>
        /// Retry an action later, with a method to build up options.
        /// </summary>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <typeparam name="TParam<#= j #>">The type of parameter to be passed to the retried method at index <#= j - 1 #>.</typeparam>
<#
    }
#>
        /// <typeparam name="TReturn">The return type of the invoked method.</typeparam>
        /// <param name="func">The action to try and retry.</param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="param<#= j #>">A parameter of type <typeparamref name="TParam<#= j #>" /> to pass to the retried method at index <#= j - 1 #>.</param>
<#
    }
#>
        /// <param name="optionsSetter">A method to build up options on the fly.</param>
        /// <param name="cancellationToken">The current operation's cancellation token.</param>
        /// <returns>An <see cref="System.Func{TResult}" /> that can be executed whenever required.</returns>
        /// <remarks>
        /// <para>Please be advised that, in order to properly function, this method creates a closure.</para>
        /// <para>For now, this is unavoidable.</para>
        /// <para>If you would like to avoid the creation of a closure, please use, instead, the <see cref="Now{<#= paramTypes #>, TReturn}(Func{<#= paramTypes #>, TReturn}, <#= paramTypes #>, Action{RetryOptions}, CancellationToken)"/> method and implement the delay of action yourself.</para>
        /// </remarks>
        public static Func<TReturn> Later<<#= paramTypes #>, TReturn>(Func<<#= paramTypes #>, TReturn> func, <#= paramNameTypes #>, Action<RetryOptions> optionsSetter, CancellationToken cancellationToken = default)
        {
            Contract.RequiresNotNull(func, nameof(func));
            Contract.RequiresNotNull(optionsSetter, nameof(optionsSetter));

            var options = new RetryOptions();
            optionsSetter(options);

            return () => Run(func, <#= paramNames #>, options, cancellationToken);
        }
<#
}

for (int i = 1; i <= 8; i++)
{
    string[] types = new string[i];
    string[] names = new string[i];
    string[] nameTypes = new string[i];

    for (int j = 1; j <= i; j++)
    {
        types[j - 1] = $"TParam{j}";
        names[j - 1] = $"param{j}";
        nameTypes[j - 1] = $"TParam{j} param{j}";
    }

    string paramTypes = string.Join(", ", types);
    string paramNames = string.Join(", ", names);
    string paramNameTypes = string.Join(", ", nameTypes);
#>

        private static async Task RunAsync<<#= paramTypes #>>(Action<<#= paramTypes #>> action, <#= paramNameTypes #>, RetryOptions options, CancellationToken cancellationToken)
        {
            Contract.RequiresNotNullPrivate(action, nameof(action));
            Contract.RequiresNotNullPrivate(options, nameof(options));

            cancellationToken.ThrowIfCancellationRequested();

            using (var context = new ActionWith<#= i #>ParamRetryContext<<#= paramTypes #>>(action, <#= paramNames #>, options))
            {
                await context.BeginRetryProcessAsync(cancellationToken).ConfigureAwait(false);
            }
        }

        private static void Run<<#= paramTypes #>>(Action<<#= paramTypes #>> action, <#= paramNameTypes #>, RetryOptions options, CancellationToken cancellationToken = default)
        {
            Contract.RequiresNotNullPrivate(action, nameof(action));
            Contract.RequiresNotNullPrivate(options, nameof(options));

            cancellationToken.ThrowIfCancellationRequested();

            using (var context = new ActionWith<#= i #>ParamRetryContext<<#= paramTypes #>>(action, <#= paramNames #>, options))
            {
                context.BeginRetryProcess(cancellationToken);
            }
        }

        private static async Task<TReturn> RunAsync<<#= paramTypes #>, TReturn>(Func<<#= paramTypes #>, TReturn> func, <#= paramNameTypes #>, RetryOptions options, CancellationToken cancellationToken)
        {
            Contract.RequiresNotNullPrivate(func, nameof(func));
            Contract.RequiresNotNullPrivate(options, nameof(options));

            cancellationToken.ThrowIfCancellationRequested();

            using (var context = new FuncWith<#= i #>ParamRetryContext<<#= paramTypes #>, TReturn>(func, <#= paramNames #>, options))
            {
                await context.BeginRetryProcessAsync(cancellationToken).ConfigureAwait(false);

                return context.GetReturnValue();
            }
        }

        private static TReturn Run<<#= paramTypes #>, TReturn>(Func<<#= paramTypes #>, TReturn> func, <#= paramNameTypes #>, RetryOptions options, CancellationToken cancellationToken = default)
        {
            Contract.RequiresNotNullPrivate(func, nameof(func));
            Contract.RequiresNotNullPrivate(options, nameof(options));

            cancellationToken.ThrowIfCancellationRequested();

            using (var context = new FuncWith<#= i #>ParamRetryContext<<#= paramTypes #>, TReturn>(func, <#= paramNames #>, options))
            {
                context.BeginRetryProcess(cancellationToken);

                return context.GetReturnValue();
            }
        }
<#
}
#>
#pragma warning restore HAA0603 // Delegate allocation from a method group
#pragma warning restore HAA0301 // Closure Allocation Source
#pragma warning restore HAA0303 // Lambda or anonymous method in a generic method allocates a delegate instance
#pragma warning restore HAA0302 // Display class allocation to capture closure
    }
}